{
  "version": 3,
  "sources": ["../../src/helpers/types.js", "../../src/lib/gsvg.js"],
  "sourcesContent": ["export const FUNCTION  = 'function';\r\nexport const UNDEFINED = 'undefined';\r\nexport const OBJECT    = 'object';\r\nexport const STRING    = 'string';\r\nexport const ARRAY     = 'array';\r\nexport const NUMBER    = 'number';\r\nexport const BOOLEAN   = 'boolean';\r\nexport const DATE      = 'date';\r\nexport const SYMBOL    = 'symbol';\r\n\r\nexport const EMPTY_STRING = '';\r\nexport const COMA         = ',';\r\nexport const COLON        = ':';\r\nexport const SEMICOLON    = ';';\r\n\r\nexport const isObject    = (v) => typeof v === OBJECT;\r\nexport const isString    = (v) => typeof v === STRING;\r\nexport const isFunction  = (v) => typeof v === FUNCTION;\r\nexport const isNumber    = (v) => typeof v === NUMBER && !isNaN(v);\r\nexport const isUndefined = (v) => typeof v === UNDEFINED;\r\nexport const isSymbol    = (v) => typeof v === SYMBOL;\r\nexport const isBoolean   = (v) => typeof v === BOOLEAN;\r\nexport const isArray     = (v) => Array.isArray(v);\r\nexport const isDate      = (v) => v instanceof Date && !isNaN(v);\r\nexport const isNull      = (v) => v === null;\r\n\r\n/**\r\n * Convert attribute name to camel property name\r\n * @param {string} name\r\n * @return {string}\r\n */\r\nexport const toCamel = name => name.replace(/-([a-z0-9])/g, (x, y) => y.toUpperCase());\r\n\r\n/**\r\n * Converto property name to hyphen attribute name\r\n * @param {string} name\r\n * @return {string}\r\n */\r\nexport const toHyphen = name => {\r\n  name = name.replace(/([A-Z])/g, '-$1').toLowerCase();\r\n  return name[0] === '-' ? name.slice(1) : name;\r\n};\r\n\r\n\r\n/**\r\n * Convert an object property to an attribute string\r\n * @param {Object} value\r\n * @return {string|undefined}\r\n */\r\nexport function object2attribute (value) {\r\n  if (isObject(value)) {\r\n    let str = '';\r\n    for (let key of Object.keys(value)) {\r\n      str += `${ str ? '; ' : '' }${ key }: ${ value[key] }`;\r\n    }\r\n    return str;\r\n  } else if (isString(value)) {\r\n    return value;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Convert an attribute string to an object property\r\n * @param {string} value\r\n * @return {Object|undefined}\r\n */\r\nexport function attribute2object (value) {\r\n  if (isString(value)) {\r\n    try {\r\n      const normalized = value\r\n        .replace(/^\\s*{/,'')\r\n        .replace(/}\\s*$/,'')\r\n        .split(/((?:[^;^,\"']|\"[^\"]*\"|'[^']*')+)/)\r\n        .filter(partial => !['', ';', ','].includes(partial.trim()))\r\n        .map(partial => partial.split(':'))\r\n        .map(partial => `\"${ partial[0].trim() }\":${ str2value(\r\n          partial[1].trim(),\r\n          undefined,\r\n          true\r\n        ) }`)\r\n        .join(',');\r\n      return JSON.parse(`{${ normalized }}`);\r\n    } catch (err) {\r\n      console.error(err);\r\n      return undefined;\r\n    }\r\n  } else if (isObject(value)) {\r\n    return value;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Convert an attribute string to an array\r\n * @param {string} value\r\n * @return {Object|undefined}\r\n */\r\nexport function attribute2array (value) {\r\n  if (isString(value)) {\r\n    if (value.trim()[0] === '[') {\r\n      return (value.match(/\\[(.*?)[^\\]]]/g) || []).map(arr => attribute2array(arr.substring(\r\n        1,\r\n        arr.length - 1\r\n      )));\r\n    } else {\r\n      return value.split(/[,;]/).map(str => str2value(str.trim()));\r\n    }\r\n  } else if (isArray(value)) {\r\n    return value;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Convert an attribute string to an array of objects\r\n * @param {string} value\r\n * @return {Object|undefined}\r\n */\r\nexport function attribute2arrayObject (value) {\r\n  if (isString(value)) {\r\n    if (value.trim()[0] === '[') {\r\n      return (value.match(/\\[(.*?)[^\\]]]/g) || []).map(arr => attribute2object(arr.substring(\r\n        1,\r\n        arr.length - 1\r\n      )));\r\n    } else {\r\n      return [attribute2object(value)];\r\n    }\r\n  } else if (isArray(Array)) {\r\n    return value;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {Object} value\r\n * @return {string|undefined}\r\n */\r\nexport function array2attribute (value) {\r\n  if (isArray(value)) {\r\n    let str = JSON.stringify(value);\r\n    return str.substr(1, str.length - 2)\r\n              .replace(/,/g, ', ')\r\n              .replace(/\"/g, '');\r\n  } else if (isString(value)) {\r\n    return value;\r\n  }\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * Convert a string into a value number, boolean or string (with \"\" if quote is true)\r\n * @private\r\n * @param {string} str\r\n * @param {string} [type]\r\n * @param {boolean} [quote=false]\r\n * @return {any}\r\n */\r\nexport function str2value (str, type, quote = false) {\r\n  if (!isString(str)) {\r\n    return str;\r\n  }\r\n  str = removeDoubleQuote(str.trim());\r\n  if (type === ARRAY) {\r\n    return attribute2array(str);\r\n  }\r\n  if (type === OBJECT) {\r\n    return attribute2object(str);\r\n  }\r\n  if (isUndefined(type) || type === NUMBER) {\r\n    if (isUndefined(str) || str === '') {\r\n      return undefined;\r\n    }\r\n    let value = +str;\r\n    if (!Number.isNaN(value) || type === NUMBER) {\r\n      return value;\r\n    }\r\n  }\r\n  if (isUndefined(type) || type === BOOLEAN) {\r\n    if (str === 'true') {\r\n      return true;\r\n    } else if (str === 'false') {\r\n      return false;\r\n    }\r\n    if (type === BOOLEAN) {\r\n      if (str === '0') {\r\n        return false;\r\n      }\r\n      return !!str;\r\n    }\r\n  }\r\n  if (type === DATE) {\r\n    try {\r\n      let value = new Date(str);\r\n      if (!Number.isNaN(value.getTime())) {\r\n        return value;\r\n      }\r\n    } catch (e) {\r\n      void (0);\r\n    }\r\n    return undefined;\r\n  }\r\n  if (isUndefined(type) || type === STRING) {\r\n    return quote ? `\"${ str }\"` : str;\r\n  }\r\n}\r\n\r\nfunction removeDoubleQuote (str) {\r\n  if (\r\n    (str[0] === '\\'' && str[str.length - 1] === '\\'') ||\r\n    (str[0] === '\"' && str[str.length - 1] === '\"')\r\n  ) {\r\n    return str.substring(1, str.length - 1);\r\n  }\r\n  return str;\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} str\r\n * @returns {boolean}\r\n */\r\nexport function isLikeObject(str) {\r\n  return /^\\s*{(.|\\s)*}\\s*$/.test(str);\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} str\r\n * @returns {boolean}\r\n */\r\nexport function isLikeArray(str) {\r\n  return /^\\s*\\[(.|\\s)*]\\s*$/.test(str);\r\n}\r\n\r\n\r\nexport function csvStr2obj (str) {\r\n  let keys = [];\r\n  return str\r\n    .split(/(\\r\\n|\\r|\\n)/)\r\n    .map(r => r.trim())\r\n    .filter(r => r)\r\n    .reduce(\r\n      (result, row, idx) => {\r\n        const obj   = {};\r\n        const parts = row\r\n          .split(/((?:[^;^,\"']|\"[^\"]*\"|'[^']*')+)/)\r\n          .filter(partial => ![EMPTY_STRING, SEMICOLON, COMA].includes(partial.trim()));\r\n        if (idx === 0) {\r\n          keys = [...parts.map(p => JSON.parse(p))];\r\n          return result;\r\n        }\r\n        parts.forEach((part, i) => {\r\n          obj[keys[i]] = JSON.parse(part);\r\n        });\r\n        result.push(obj);\r\n        return result;\r\n      },\r\n      []\r\n    );\r\n}\r\n\r\nexport function jsStr2obj (str) {\r\n  const code = `return (${ str });`\r\n  const ret  = (new Function(code))();\r\n  return typeof ret === 'function' ? ret() : ret;\r\n}\r\n\r\nexport function funcStr2obj (str, $) {\r\n  return (new Function('$', `${ str };let ___$$$ret = {};${\r\n    [...str.matchAll(/\\s*function\\s*(\\w+)/gm)]\r\n      .map(x => `if (typeof ${ x[1] } === 'function') ___$$$ret.${ x[1] } = ${ x[1] };`)\r\n      .join('')\r\n  } return ___$$$ret;`))($);\r\n}", "import {\r\n  FUNCTION, EMPTY_STRING, COMA,\r\n  isSymbol, isObject, isString, isUndefined, isFunction, isBoolean, isNull\r\n} from '../helpers/types.js';\r\n\r\nconst NAME         = 'gSVGObject';\r\nconst NS           = 'http://www.w3.org/2000/svg';\r\nconst SVG          = 'svg';\r\nconst PATH         = 'path';\r\nconst D            = 'd';\r\nconst cache        = new WeakMap();\r\nconst readonlyProp = new Set();\r\n\r\n\r\n/**\r\n * Check if is direct access member\r\n * @param {string} prop\r\n * @returns {boolean}\r\n */\r\nconst directAccess = (prop) => prop[0] === '_' || isSymbol(prop) || ['el', 'gSVG'].includes(prop);\r\n\r\n/**\r\n * Check the instance\r\n * @param {object} o\r\n * @param {object} p\r\n * @returns {boolean}\r\n */\r\nconst is = (o, p) => o instanceof p;\r\n\r\n/**\r\n * Create a random id\r\n * @returns {string}\r\n */\r\nconst randomId = () => NAME + Math.random().toString(32).substring(2);\r\n\r\n/**\r\n * Check if the element is wrapped or not\r\n * @param {*} el\r\n * @returns {boolean}\r\n */\r\nconst isWrapped = (el) => isObject(el) && !isNull(el) && el[Symbol.toStringTag] === NAME;\r\n\r\n/**\r\n * Create a new element\r\n * @param tag\r\n * @returns {gSVGObject}\r\n */\r\nconst create = (tag) => wrapper(document.createElementNS(NS, tag));\r\n\r\n/**\r\n * Create, wrap or return the wrapped object\r\n * @param {gSVGObject|object|string} tag\r\n * @returns {gSVGObject|object}\r\n */\r\nconst createWrap = (tag) =>\r\n  isString(tag) ?\r\n    create(tag) :\r\n    isObject(tag) && tag !== null ?\r\n      isWrapped(tag) ?\r\n        tag :\r\n        wrapper(tag) :\r\n      tag;\r\n\r\n/**\r\n * Return the original method name for an alias\r\n * @param {string} prop\r\n * @returns {string}\r\n */\r\nconst alias = (prop) => ({\r\n  content  : 'innerHTML',\r\n  source   : 'outerHTML',\r\n  parent   : 'parentElement',\r\n  next     : 'nextElementSibling',\r\n  previous : 'previousElementSibling'\r\n})[prop] || prop;\r\n\r\n\r\n/**\r\n * @typedef {Object} gSVGObject\r\n */\r\n\r\n/**\r\n * GSVGObject\r\n */\r\nclass GSVGObject {\r\n\r\n  constructor (element) {\r\n    this._el  = element;\r\n    this.gSVG = gSVG;\r\n  }\r\n\r\n  get [Symbol.toStringTag] () {\r\n    return NAME;\r\n  }\r\n\r\n  /**\r\n   * el\r\n   * @type {Object}\r\n   */\r\n  get el () {\r\n    return this._el;\r\n  }\r\n\r\n  /**\r\n   * @param {gSVGObject|Object|string} tag\r\n   * @returns {gSVGObject}\r\n   */\r\n  add (tag) {\r\n    let r = createWrap(tag);\r\n    if (r) {\r\n      this._el.appendChild(r._el);\r\n    }\r\n    return r;\r\n  }\r\n\r\n  /**\r\n   * @param {gSVGObject|Object|string} tag\r\n   * @returns {gSVGObject}\r\n   */\r\n  addBefore (tag) {\r\n    let r = createWrap(tag);\r\n    if (r) {\r\n      this._el.insertBefore(r._el, this._el.firstChild || null);\r\n    }\r\n    return r;\r\n  }\r\n\r\n  /**\r\n   * @param {string|Object} tag\r\n   * @returns {gSVGObject}\r\n   */\r\n  attachTo (tag) {\r\n    const r = isObject(tag) ?\r\n      (isWrapped(tag) ?\r\n          tag._el :\r\n          tag\r\n      ) :\r\n      document.querySelector(tag);\r\n    r.appendChild(this._el);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * gSVGObject.id()\r\n   * @param {string} [value]\r\n   * @returns {string|gSVGObject}\r\n   */\r\n  id (value) {\r\n    if (!value) {\r\n      return this._el.id || (this._el.id = randomId());\r\n    }\r\n    this._el.setAttribute('id', value);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * gSVGObject.ref()\r\n   * @returns {string}\r\n   */\r\n  ref () {\r\n    return `#${ this.id() }`;\r\n  }\r\n\r\n  /**\r\n   * gSVGObject.url()\r\n   * @returns {string}\r\n   */\r\n  url () {\r\n    return `url(${ this.ref() })`;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n *\r\n * @param element\r\n * @returns {gSVGObject}\r\n */\r\nconst wrapper = (element) => {\r\n  if (!isObject(element) || isNull(element)) {\r\n    return null;\r\n  }\r\n  if (cache.has(element)) {\r\n    return cache.get(element);\r\n  }\r\n  const proxy = new Proxy(\r\n    new GSVGObject(element),\r\n    // Handler\r\n    {\r\n      get (wrapped, prop) {\r\n        // Symbol return\r\n        if (directAccess(prop)) {\r\n          return wrapped[prop];\r\n        }\r\n        // Return the wrapper method\r\n        if (!isUndefined(wrapped[prop])) {\r\n          return (...args) => {\r\n            preCall(proxy, prop, args);\r\n            return wrapped[prop].call(proxy, ...args);\r\n          }\r\n        }\r\n        // Special case <path d=\"\"/>\r\n        if (prop === D && element.tagName.toLowerCase() === PATH) {\r\n          let content  = element.getAttribute(D) || '';\r\n          const dProxy = new Proxy(\r\n            (arg) => {\r\n              preCall(proxy, prop, [arg])\r\n              return isString(arg) ?\r\n                element.setAttribute(D, arg) || proxy :\r\n                element.getAttribute(D)\r\n            },\r\n            {\r\n              get (_target, command) {\r\n                return (...args) => {\r\n                  content += pathD(proxy, command, args);\r\n                  element?.setAttribute(prop, content);\r\n                  return dProxy;\r\n                };\r\n              }\r\n            }\r\n          );\r\n          return dProxy;\r\n        }\r\n        // Special case <path g-bind:d=\"\"/>\r\n        if (prop === '$d') {\r\n          let content  = '';\r\n          const dProxy = new Proxy(\r\n            {},\r\n            {\r\n              get (_target, command) {\r\n                return (...args) => {\r\n                  if (command === Symbol.toPrimitive) {\r\n                    return content\r\n                  }\r\n                  const d = pathD(proxy, command, args);\r\n                  content += d;\r\n                  return dProxy;\r\n                };\r\n              }\r\n            }\r\n          );\r\n          return dProxy;\r\n        }\r\n        prop = alias(prop);\r\n        // Return the element method\r\n        if (isFunction(element[prop])) {\r\n          return (...args) => {\r\n            preCall(proxy, prop, args);\r\n            const result = element[prop].call(element, ...args);\r\n            return (\r\n              isUndefined(result) ?\r\n                proxy :\r\n                adaptedResult(result)\r\n            );\r\n          };\r\n        }\r\n        // Return the wrapped method\r\n        return methodWrapper(element, prop, proxy);\r\n      }\r\n    }\r\n  );\r\n  cache.set(element, proxy);\r\n  return proxy;\r\n};\r\n\r\n/**\r\n *\r\n * @param {Object} element\r\n * @param {string} prop\r\n * @param {Object} parentWrapper\r\n * @param {string} [parentProp]\r\n * @returns {Proxy<function()>}\r\n */\r\nconst methodWrapper = (element, prop, parentWrapper, parentProp) => {\r\n  const propNormalized = prop.replace(/_/g, '-');\r\n  const f              = (...args) => {\r\n    preCall(parentWrapper, parentProp ? `${ parentProp }.${ prop }` : prop, args);\r\n    // Get value\r\n    if (args.length === 0) {\r\n      const result = element?.hasAttribute && element.hasAttribute(propNormalized) ?\r\n        element.getAttribute(propNormalized) :\r\n        element[propNormalized];\r\n      return adaptedResult(result);\r\n    }\r\n    // Set value as property\r\n    const value = args[0];\r\n    if (is(element, CSSStyleDeclaration)) {\r\n      element[propNormalized] = value;\r\n      return parentWrapper;\r\n    }\r\n    if (propNormalized in element && !readonlyProp.has(propNormalized)) {\r\n      const previousValue = element[propNormalized];\r\n      if (String(previousValue) === String(value)) {  // !!Check!!\r\n        return parentWrapper;\r\n      }\r\n      try {\r\n        element[propNormalized] = value;\r\n      } catch (err) {\r\n        readonlyProp.add(propNormalized);\r\n      }\r\n      if (\r\n        (isObject(element[propNormalized]) && element[propNormalized] === value) ||\r\n        element[propNormalized] !== previousValue\r\n      ) {\r\n        return parentWrapper;\r\n      }\r\n      readonlyProp.add(propNormalized);\r\n    }\r\n    // Set value as attribute\r\n    if (value !== 0 && !value) {\r\n      element?.removeAttribute && element.removeAttribute(propNormalized);\r\n    } else {\r\n      element?.setAttribute && element.setAttribute(propNormalized, isBoolean(value) ?\r\n        '' :\r\n        String(args));\r\n    }\r\n    return parentWrapper;\r\n  };\r\n  return new Proxy(\r\n    f,\r\n    {\r\n      get (_target, prop2) {\r\n        const result = element[propNormalized][prop2];\r\n        return (\r\n          isFunction(result) ?\r\n            (...args) => {\r\n              preCall(parentWrapper, `${ prop }.${ prop2 }`, args)\r\n              return result.call(element[propNormalized], ...args) || parentWrapper;\r\n            } :\r\n            methodWrapper(element[propNormalized], prop2, parentWrapper, propNormalized)\r\n        );\r\n      },\r\n      set (_target, prop2, value2) {\r\n        element[propNormalized][prop2] = value2;\r\n        return true;\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\n/**\r\n * adaptedResult\r\n * @param {*} result\r\n * @returns {*}\r\n */\r\nconst adaptedResult = (result) => {\r\n  return (\r\n    is(result, HTMLCollection) || is(result, NodeList) ?\r\n      [...result].map(x => wrapper(x)) :\r\n      is(result, SVGElement) ?\r\n        wrapper(result) :\r\n        isString(result) ?\r\n          result === '' || Number.isNaN(Number(result)) ?\r\n            result :\r\n            Number(result) :\r\n          result\r\n  );\r\n};\r\n\r\nconst registeredCalls = [];\r\n\r\n/**\r\n * pluginCallback\r\n * @param {Object} wrapped\r\n * @param {string} prop\r\n * @param {Array} args\r\n * @param {Array} [extensions]\r\n */\r\nconst preCall = (wrapped, prop, args, extensions = []) => {\r\n  for (let call of registeredCalls) {\r\n    call(gSVG, wrapped, prop, args, extensions);\r\n  }\r\n};\r\n\r\nconst registeredPathD = {};\r\n\r\n/**\r\n * pathD\r\n * @param {Object} wrapped\r\n * @param {string} prop\r\n * @param {Array} args\r\n */\r\nconst pathD = (wrapped, prop, args) => {\r\n  preCall(wrapped, `d.${ prop }`, args, Object.keys(registeredPathD).map(k => `d.${ k }`));\r\n  return registeredPathD[prop] ?\r\n    registeredPathD[prop].apply(wrapped, args) :\r\n    `${ prop }${ args.join(COMA) }`\r\n}\r\n\r\n/**\r\n * @typedef {function} gSVG\r\n */\r\n\r\n/**\r\n * gSVG\r\n * @param {Object|gSVGObject|string} [el]\r\n * @returns {gSVGObject|Object|null}\r\n * @constructor\r\n */\r\nexport function gSVG (el) {\r\n  preCall(null, EMPTY_STRING, [el]);\r\n  return createWrap(isUndefined(el) ? SVG : el);\r\n}\r\n\r\n/**\r\n * gSVG.isWrapped()\r\n * @type {function({Object}) : boolean}\r\n */\r\ngSVG.isWrapped = isWrapped;\r\n\r\n/**\r\n * gSVG.extend\r\n * @param {Function} plugin\r\n * @return {gSVG}\r\n */\r\ngSVG.extend = (plugin) => {\r\n  console.warn('gSVG.extend() for old plugin is deprecated. ' +\r\n               'Please, use gSVG.install() for new plugins.')\r\n  plugin(gSVG, GSVGObject);\r\n  return gSVG;\r\n}\r\n\r\nconst setup = {\r\n  install      : install,\r\n  extendConstructor (extension) {\r\n    Object.assign(gSVG, extension);\r\n  },\r\n  extendInstance (extension) {\r\n    Object.assign(GSVGObject.prototype, extension);\r\n  },\r\n  extendPath (extension) {\r\n    Object.assign(registeredPathD, extension);\r\n  },\r\n  extendSetup (extension) {\r\n    Object.assign(setup, extension);\r\n  },\r\n  beforeEveryCall (callback) {\r\n    if (typeof callback === FUNCTION) {\r\n      registeredCalls.push(callback);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * gSVG.install - load new plugins\r\n * @param {Function|{svg: Function}} plugin\r\n * @return {gSVG|Promise}\r\n */\r\nfunction install (plugin) {\r\n  if (isFunction(plugin)) {\r\n    plugin(setup);\r\n  } else if (isFunction(plugin?.svg)) {\r\n    plugin.svg(setup);\r\n  }\r\n  return gSVG;\r\n}\r\n\r\ngSVG.install = install;\r\n\r\nexport default gSVG;\r\n"],
  "mappings": "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",
  "names": ["FUNCTION", "UNDEFINED", "OBJECT", "STRING", "BOOLEAN", "SYMBOL", "EMPTY_STRING", "COMA", "isObject", "v", "OBJECT", "isString", "STRING", "isFunction", "FUNCTION", "isUndefined", "v", "UNDEFINED", "isSymbol", "SYMBOL", "isBoolean", "BOOLEAN", "isNull", "v", "NAME", "NS", "SVG", "PATH", "D", "cache", "readonlyProp", "directAccess", "prop", "isSymbol", "is", "o", "p", "randomId", "isWrapped", "el", "isObject", "isNull", "create", "tag", "wrapper", "createWrap", "isString", "alias", "GSVGObject", "element", "gSVG", "r", "value", "proxy", "wrapped", "isUndefined", "args", "preCall", "content", "dProxy", "arg", "_target", "command", "pathD", "d", "isFunction", "result", "adaptedResult", "methodWrapper", "parentWrapper", "parentProp", "propNormalized", "f", "previousValue", "isBoolean", "prop2", "value2", "x", "registeredCalls", "extensions", "call", "registeredPathD", "k", "COMA", "EMPTY_STRING", "plugin", "setup", "install", "extension", "callback", "FUNCTION", "gsvg_default"]
}

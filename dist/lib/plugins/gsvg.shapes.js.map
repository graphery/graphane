{
  "version": 3,
  "sources": ["../../../src/plugins/shapes.js"],
  "sourcesContent": ["const round = (n) => Math.round(n * 100) / 100;\r\n\r\n/**\r\n * Convert an angle from degrees to radians\r\n * @param {number} degrees\r\n * @returns {number}\r\n */\r\nfunction degrees2radians (degrees) {\r\n  return ((degrees - 90) * Math.PI) / 180;\r\n}\r\n\r\n/**\r\n * Return an x, y coordinates from an angular reference\r\n * @param {number} centerX\r\n * @param {number} centerY\r\n * @param {number} radius\r\n * @param {number} angleDegrees\r\n * @returns {{x : *, y : *}}\r\n */\r\nfunction polar2cartesian (centerX, centerY, radius, angleDegrees) {\r\n  const angleRadians = degrees2radians(angleDegrees);\r\n  return {\r\n    x : round(centerX + radius * Math.cos(angleRadians)),\r\n    y : round(centerY + radius * Math.sin(angleRadians))\r\n  };\r\n}\r\n\r\n/**\r\n * Create an arc path\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {number} radius\r\n * @param {number} grades\r\n * @param {number} [start=0]\r\n * @return {string}\r\n */\r\nfunction arc (x, y, radius, grades, start = 0) {\r\n  start                 = Math.abs(start) >= 360 ? start % 360 : start;\r\n  grades                = Math.abs(grades) > 360 ? grades % 360 : grades;\r\n  let end               = start + grades;\r\n  const dir             = grades > 0 ? 1 : 0;\r\n  const largeArcFlag    = Math.abs(end - start) <= 180 ? 0 : 1;\r\n  const startNormalized = start < 0 ? (360 + start) % 360 : start;\r\n  let endNormalized     = grades < 0 ? (360 + end) % 360 : end;\r\n  if (endNormalized === 360) {\r\n    endNormalized = 359.9\r\n  }\r\n  const startPoint = polar2cartesian(x, y, radius, startNormalized);\r\n  const endPoint   = polar2cartesian(x, y, radius, endNormalized);\r\n  return `M${ startPoint.x },${ startPoint.y }A${ radius },${ radius },0,${ largeArcFlag },${ dir },${ endPoint.x },${ endPoint.y }`;\r\n}\r\n\r\n/**\r\n * Create an arched bar shape with a path\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {number} radius\r\n * @param {number} width\r\n * @param {number} startAngle\r\n * @param {number} endAngle\r\n * @returns {string}\r\n */\r\nfunction barArc (x, y, radius, width, startAngle, endAngle) {\r\n  const externalStart = polar2cartesian(x, y, radius, endAngle);\r\n  const externalEnd   = polar2cartesian(x, y, radius, startAngle);\r\n  const internalStart = polar2cartesian(x, y, radius - width, startAngle);\r\n  const internalEnd   = polar2cartesian(x, y, radius - width, endAngle);\r\n  const flag          = endAngle - startAngle <= 180 ? '0' : '1';\r\n  return `M${ externalStart.x },${ externalStart.y }` +\r\n         `A${ radius },${ radius },0,${ flag },0,${ externalEnd.x },${ externalEnd.y }` +\r\n         `L${ internalStart.x },${ internalStart.y }` +\r\n         `A${ radius - width },${ radius - width },0,${ flag },1,${ internalEnd.x },${ internalEnd.y }` +\r\n         `Z`;\r\n}\r\n\r\n/**\r\n * create a regular polygon shape with a path (no with a svg polygon)\r\n * @param {number} cx    - center x\r\n * @param {number} cy    - center y\r\n * @param {number} r     - radius\r\n * @param {number} n     - sides\r\n * @param {number} [a=0] - initial angle\r\n */\r\nfunction regularPolygon (cx, cy, r, n, a = 0) {\r\n  const angle = 360 / n;\r\n  let path    = '';\r\n  for (let i = 0; i < n; i++) {\r\n    const coords = polar2cartesian(cx, cy, r, (angle * i) + a);\r\n    path += `${ i ? 'L' : 'M' }${ coords.x },${ coords.y }`;\r\n  }\r\n  path += 'Z';\r\n  return path;\r\n}\r\n\r\n\r\n/**\r\n * create a star shape with a path (no with a svg polygon)\r\n * @param {number} cx    - center x\r\n * @param {number} cy    - center y\r\n * @param {number} r1    - external radius\r\n * @param {number} r2    - internal radius\r\n * @param {number} n     - sides\r\n * @param {number} [a=0] - initial angle\r\n */\r\nfunction star (cx, cy, r1, r2, n, a = 0) {\r\n  const angle = 360 / n;\r\n  let path    = '';\r\n  for (let i = 0; i < n; i++) {\r\n    const external = polar2cartesian(cx, cy, r1, (angle * i) + a);\r\n    path += `${ i ? 'L' : 'M' }${ external.x },${ external.y }`;\r\n    const internal = polar2cartesian(cx, cy, r2, (angle * i) + a + (angle / 2));\r\n    path += `L${ internal.x },${ internal.y }`;\r\n  }\r\n  path += 'Z';\r\n  return path;\r\n}\r\n\r\n/**\r\n * create a circle shape with a path (no with a svg circle)\r\n * @param {number} cx    - center x\r\n * @param {number} cy    - center y\r\n * @param {number} r     - radius\r\n */\r\nfunction circle (cx, cy, r) {\r\n  return `M${ cx - r },${ cy }a${ r },${ r },0,1,0,${ r * 2 },0a${ r },${ r },0,1,0,-${ r * 2 },0`;\r\n}\r\n\r\nexport function svgPlugin (setup) {\r\n\r\n  setup.extendConstructor({\r\n    polar2cartesian,\r\n    degrees2radians\r\n  });\r\n\r\n  setup.extendPath({\r\n    arc,\r\n    barArc,\r\n    regularPolygon,\r\n    star,\r\n    circle\r\n  });\r\n}"],
  "mappings": "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",
  "names": ["round", "n", "degrees2radians", "degrees", "polar2cartesian", "centerX", "centerY", "radius", "angleDegrees", "angleRadians", "arc", "x", "y", "grades", "start", "end", "dir", "largeArcFlag", "startNormalized", "endNormalized", "startPoint", "endPoint", "barArc", "width", "startAngle", "endAngle", "externalStart", "externalEnd", "internalStart", "internalEnd", "flag", "regularPolygon", "cx", "cy", "r", "a", "angle", "path", "i", "coords", "star", "r1", "r2", "external", "internal", "circle", "svgPlugin", "setup"]
}

{
  "version": 3,
  "sources": ["../../../src/plugins/observe.resize.js", "../../../src/plugins/keep.aspect.js"],
  "sourcesContent": ["/**\r\n * This callback is displayed as part of the Requester class.\r\n * @callback resizeObserver~callback\r\n * @param {SVGMatrix} currentMatrix\r\n * @param {SVGMatrix} prevMatrix\r\n */\r\n\r\nconst resizeObserverCache = new WeakMap();\r\n\r\n/**\r\n * resizeObserver - call the callback if the SVG is resized\r\n * @param {resizeObserver~callback} [callback]\r\n * @returns {gSVG}\r\n */\r\nfunction resizeObserver (callback = () => void (0)) {\r\n  const self = this;\r\n  const svg  = this.el.tagName.toLowerCase() === 'svg' ? this.el : this.closest('svg').el;\r\n  if (resizeObserverCache.has(svg)) {\r\n    return resizeObserverCache.get(svg).push(callback);\r\n  }\r\n  resizeObserverCache.set(svg, [callback]);\r\n  let prevMatrix = {};\r\n  const check    = () => {\r\n    const currentMatrix = svg.getScreenCTM();\r\n    if (currentMatrix !== null && (\r\n      currentMatrix.a !== prevMatrix.a ||\r\n      currentMatrix.b !== prevMatrix.b ||\r\n      currentMatrix.c !== prevMatrix.c ||\r\n      currentMatrix.d !== prevMatrix.d ||\r\n      currentMatrix.e !== prevMatrix.e ||\r\n      currentMatrix.f !== prevMatrix.f)\r\n    ) {\r\n      const callbacks = resizeObserverCache.get(svg);\r\n      for (let cb of callbacks) {\r\n        cb.call(self, currentMatrix, prevMatrix);\r\n      }\r\n      const event = new CustomEvent(\"resize\", {detail : {currentMatrix, prevMatrix}});\r\n      self.el.dispatchEvent(event);\r\n      prevMatrix = currentMatrix;\r\n    }\r\n    window.requestAnimationFrame(check);\r\n  };\r\n  check();\r\n  return self;\r\n}\r\n\r\n\r\n/**\r\n * resizeObserver plugins installer\r\n * @usage gySVG.install( resizeObserver )\r\n */\r\nexport function svgPlugin (setup) {\r\n  // Update gySVGObject\r\n  setup.extendInstance({\r\n    resizeObserver\r\n  });\r\n}\r\n", "import { svgPlugin as resizeObserver } from './observe.resize.js';\r\n\r\n/**\r\n * keepAspect - keep the size and the stroke when the SVG is resized\r\n * @param {string} [option = 'size']\r\n * @returns {gSVG}\r\n */\r\nfunction keepAspect (option = 'size') {\r\n  const svg = this.closest('svg');\r\n  if (!svg) {\r\n    this.top().addEventListener('attach', (evt) => {\r\n      keepAspect.call(this, option);\r\n    });\r\n    return this;\r\n  }\r\n  if (svg._el.getRootNode() === svg._el) {\r\n    svg.addEventListener('attach', (evt) => {\r\n      keepAspect.call(this, option);\r\n    });\r\n    return this;\r\n  }\r\n  if (option === 'stroke') {\r\n    keepStroke(svg, this);\r\n  } else {\r\n    keepSize(svg, this);\r\n  }\r\n  return this;\r\n}\r\n\r\n\r\n/**\r\n *\r\n * @param {gSVGObject} svg\r\n * @param {gSVGObject} el\r\n */\r\nfunction keepSize (svg, el) {\r\n  const originalCTM = svg.getScreenCTM() || {a : 1, d : 1};\r\n  const BBox        = el.tagName().toLowerCase() === 'text' ?\r\n    {x : el.x(), y : el.y()} :\r\n    el.getBBox();\r\n  svg.resizeObserver((currentCTM) => {\r\n    const transform = el.transform('').transform;\r\n    const scaleX = originalCTM.a / currentCTM.a;\r\n    const scaleY = originalCTM.d / currentCTM.d;\r\n    const translateX = BBox.x * (currentCTM.a / originalCTM.a) - BBox.x;\r\n    const translateY = BBox.y * (currentCTM.d / originalCTM.d) - BBox.y;\r\n    if (scaleX !== 1 || scaleY !== 1) {\r\n      transform.scale(originalCTM.a / currentCTM.a, originalCTM.d / currentCTM.d)\r\n    }\r\n    if (translateY !== 0 || translateY !== 0) {\r\n      transform.translate(translateX, translateY);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n *\r\n * @param {gSVGObject} svg\r\n * @param {gSVGObject} el\r\n */\r\nfunction keepStroke (svg, el) {\r\n  const originalCTM  = svg.getScreenCTM() || {a : 1, d : 1};\r\n  el.el._strokeWidth = parseFloat(getComputedStyle(el._el).strokeWidth);\r\n  svg.resizeObserver((currentCTM) => {\r\n    el.style.strokeWidth(el.el._strokeWidth * Math.max(originalCTM.a / currentCTM.a, originalCTM.d / currentCTM.d));\r\n  });\r\n}\r\n\r\nexport function svgPlugin (setup) {\r\n\r\n  // Install dependencies\r\n  setup.install(resizeObserver);\r\n\r\n  // Update gSVGObject\r\n  setup.extendInstance({\r\n    keepAspect\r\n  });\r\n\r\n  if (setup.extendTemplate) {\r\n    setup.extendTemplate.defineDirective({\r\n      name : 'g-keep-aspect',\r\n      execute (gObject, {expression}) {\r\n        gObject.keepAspect(expression);\r\n      }\r\n    })\r\n  }\r\n\r\n}"],
  "mappings": "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",
  "names": ["resizeObserverCache", "resizeObserver", "callback", "self", "svg", "prevMatrix", "check", "currentMatrix", "callbacks", "cb", "event", "svgPlugin", "setup", "keepAspect", "option", "svg", "evt", "keepStroke", "keepSize", "el", "originalCTM", "BBox", "currentCTM", "transform", "scaleX", "scaleY", "translateX", "translateY", "svgPlugin", "setup", "gObject", "expression"]
}

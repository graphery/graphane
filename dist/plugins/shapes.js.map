{
  "version": 3,
  "sources": ["../../src/plugins/shapes.js"],
  "sourcesContent": ["const round = (n) => Math.round(n * 10000) / 10000;\r\n\r\n/**\r\n * Convert an angle from degrees to radians\r\n * @param {number} degrees\r\n * @returns {number}\r\n */\r\nfunction degrees2radians (degrees) {\r\n  return ((degrees - 90) * Math.PI) / 180;\r\n}\r\n\r\n/**\r\n * Return an x, y coordinates from an angular reference\r\n * @param {number} cx           - center x\r\n * @param {number} cy           - center y\r\n * @param {number} r            - radius\r\n * @param {number} angleDegrees - angle in degrees\r\n * @returns {{x : *, y : *}}\r\n */\r\nfunction polar2cartesian (cx, cy, r, angleDegrees) {\r\n  const angleRadians = degrees2radians(angleDegrees);\r\n  return {\r\n    x : round(cx + r * Math.cos(angleRadians)),\r\n    y : round(cy + r * Math.sin(angleRadians))\r\n  };\r\n}\r\n\r\n/**\r\n * Create an arc path\r\n * @param {number} cx        - center x\r\n * @param {number} cy        - center y\r\n * @param {number} r         - radius\r\n * @param {number} grades    - grades in degrees\r\n * @param {number} [start=0] - start position in degrees\r\n * @return {string}\r\n */\r\nfunction arc (cx, cy, r, grades, start = 0) {\r\n  start                 = Math.abs(start) >= 360 ? start % 360 : start;\r\n  grades                = Math.abs(grades) > 360 ? grades % 360 : grades;\r\n  grades                = Math.abs(grades) === 360 ? grades > 0 ? 359.9 : -359.9 : grades;\r\n  let end               = start + grades;\r\n  const dir             = grades > 0 ? 1 : 0;\r\n  const largeArcFlag    = Math.abs(end - start) <= 180 ? 0 : 1;\r\n  const startNormalized = start < 0 ? (360 + start) % 360 : start;\r\n  let endNormalized     = end < 0 ? (360 + end) % 360 : end;\r\n  const startPoint      = polar2cartesian(cx, cy, r, startNormalized);\r\n  const endPoint        = polar2cartesian(cx, cy, r, endNormalized);\r\n  return `M${ startPoint.x },${ startPoint.y }A${ r },${ r },0,${ largeArcFlag },${ dir },${ endPoint.x },${ endPoint.y }`;\r\n}\r\n\r\n/**\r\n * Create an arched bar shape with a path\r\n * @param {number} cx        - center x\r\n * @param {number} cy        - center y\r\n * @param {number} r         - radius\r\n * @param {number} width     - bar width\r\n * @param {number} grades    - grades in degrees\r\n * @param {number} [start=0] - start position in degrees\r\n * @returns {string}\r\n */\r\nfunction barArc (cx, cy, r, width, grades, start = 0) {\r\n  const sup = arc(cx, cy, r + (width / 2), grades, start);\r\n  const inf = arc(cx, cy, r - (width / 2), -grades, start + grades);\r\n  return sup + `L` + inf.substring(1) + `Z`;\r\n}\r\n\r\n/**\r\n * Create a circle slice shape with a path\r\n * @param {number} cx        - center x\r\n * @param {number} cy        - center y\r\n * @param {number} r         - radius\r\n * @param {number} grades    - grades in degrees\r\n * @param {number} [start=0] - start position in degrees\r\n * @returns {string}\r\n */\r\nfunction circleSlice (cx, cy, r, grades, start = 0) {\r\n  const sup = arc(cx, cy, r, grades, start);\r\n  return sup + `L${ cx },${ cy }Z`;\r\n}\r\n\r\n\r\n/**\r\n * create a regular polygon shape with a path (no with a svg polygon)\r\n * @param {number} cx        - center x\r\n * @param {number} cy        - center y\r\n * @param {number} r         - radius\r\n * @param {number} sides     - sides\r\n * @param {number} [start=0] - initial angle\r\n */\r\nfunction regularPolygon (cx, cy, r, sides, start = 0) {\r\n  const angle = 360 / sides;\r\n  let path    = '';\r\n  for (let i = 0; i < sides; i++) {\r\n    const coords = polar2cartesian(cx, cy, r, (angle * i) + start);\r\n    path += `${ i ? 'L' : 'M' }${ coords.x },${ coords.y }`;\r\n  }\r\n  path += 'Z';\r\n  return path;\r\n}\r\n\r\n\r\n/**\r\n * create a star shape with a path (no with a svg polygon)\r\n * @param {number} cx        - center x\r\n * @param {number} cy        - center y\r\n * @param {number} r1        - external radius\r\n * @param {number} r2        - internal radius\r\n * @param {number} sides     - sides\r\n * @param {number} [start=0] - initial angle\r\n */\r\nfunction star (cx, cy, r1, r2, sides, start = 0) {\r\n  const angle = 360 / sides;\r\n  let path    = '';\r\n  for (let i = 0; i < sides; i++) {\r\n    const external = polar2cartesian(cx, cy, r1, (angle * i) + start);\r\n    path += `${ i ? 'L' : 'M' }${ external.x },${ external.y }`;\r\n    const internal = polar2cartesian(cx, cy, r2, (angle * i) + start + (angle / 2));\r\n    path += `L${ internal.x },${ internal.y }`;\r\n  }\r\n  path += 'Z';\r\n  return path;\r\n}\r\n\r\n/**\r\n * create a circle shape with a path (no with a svg circle)\r\n * @param {number} cx    - center x\r\n * @param {number} cy    - center y\r\n * @param {number} r     - radius\r\n */\r\nfunction circle (cx, cy, r) {\r\n  return `M${ cx - r },${ cy }a${ r },${ r },0,1,0,${ r * 2 },0a${ r },${ r },0,1,0,-${ r * 2 },0`;\r\n}\r\n\r\nexport function svgPlugin (setup) {\r\n\r\n  setup.extendConstructor({\r\n    polar2cartesian,\r\n    degrees2radians\r\n  });\r\n\r\n  setup.extendPath({\r\n    arc,\r\n    barArc,\r\n    circleSlice,\r\n    regularPolygon,\r\n    star,\r\n    circle\r\n  });\r\n}"],
  "mappings": "AAAA,IAAMA,EAAS,GAAM,KAAK,MAAM,EAAI,GAAK,EAAI,IAO7C,SAASC,EAAiBC,EAAS,CACjC,OAASA,EAAU,IAAM,KAAK,GAAM,GACtC,CAUA,SAASC,EAAiBC,EAAIC,EAAIC,EAAGC,EAAc,CACjD,IAAMC,EAAeP,EAAgBM,CAAY,EACjD,MAAO,CACL,EAAIP,EAAMI,EAAKE,EAAI,KAAK,IAAIE,CAAY,CAAC,EACzC,EAAIR,EAAMK,EAAKC,EAAI,KAAK,IAAIE,CAAY,CAAC,CAC3C,CACF,CAWA,SAASC,EAAKL,EAAIC,EAAIC,EAAGI,EAAQC,EAAQ,EAAG,CAC1CA,EAAwB,KAAK,IAAIA,CAAK,GAAK,IAAMA,EAAQ,IAAMA,EAC/DD,EAAwB,KAAK,IAAIA,CAAM,EAAI,IAAMA,EAAS,IAAMA,EAChEA,EAAwB,KAAK,IAAIA,CAAM,IAAM,IAAMA,EAAS,EAAI,MAAQ,OAASA,EACjF,IAAIE,EAAoBD,EAAQD,EAC1BG,EAAkBH,EAAS,EAAI,EAAI,EACnCI,EAAkB,KAAK,IAAIF,EAAMD,CAAK,GAAK,IAAM,EAAI,EACrDI,EAAkBJ,EAAQ,GAAK,IAAMA,GAAS,IAAMA,EACtDK,EAAoBJ,EAAM,GAAK,IAAMA,GAAO,IAAMA,EAChDK,EAAkBd,EAAgBC,EAAIC,EAAIC,EAAGS,CAAe,EAC5DG,EAAkBf,EAAgBC,EAAIC,EAAIC,EAAGU,CAAa,EAChE,MAAO,IAAKC,EAAW,CAAE,IAAKA,EAAW,CAAE,IAAKX,CAAE,IAAKA,CAAE,MAAOQ,CAAa,IAAKD,CAAI,IAAKK,EAAS,CAAE,IAAKA,EAAS,CAAE,EACxH,CAYA,SAASC,EAAQf,EAAIC,EAAIC,EAAGc,EAAOV,EAAQC,EAAQ,EAAG,CACpD,IAAMU,EAAMZ,EAAIL,EAAIC,EAAIC,EAAKc,EAAQ,EAAIV,EAAQC,CAAK,EAChDW,EAAMb,EAAIL,EAAIC,EAAIC,EAAKc,EAAQ,EAAI,CAACV,EAAQC,EAAQD,CAAM,EAChE,OAAOW,EAAM,IAAMC,EAAI,UAAU,CAAC,EAAI,GACxC,CAWA,SAASC,EAAanB,EAAIC,EAAIC,EAAGI,EAAQC,EAAQ,EAAG,CAElD,OADYF,EAAIL,EAAIC,EAAIC,EAAGI,EAAQC,CAAK,EAC3B,IAAKP,CAAG,IAAKC,CAAG,GAC/B,CAWA,SAASmB,EAAgBpB,EAAIC,EAAIC,EAAGmB,EAAOd,EAAQ,EAAG,CACpD,IAAMe,EAAQ,IAAMD,EAChBE,EAAU,GACd,QAASC,EAAI,EAAGA,EAAIH,EAAOG,IAAK,CAC9B,IAAMC,EAAS1B,EAAgBC,EAAIC,EAAIC,EAAIoB,EAAQE,EAAKjB,CAAK,EAC7DgB,GAAQ,GAAIC,EAAI,IAAM,GAAI,GAAIC,EAAO,CAAE,IAAKA,EAAO,CAAE,EACvD,CACA,OAAAF,GAAQ,IACDA,CACT,CAYA,SAASG,EAAM1B,EAAIC,EAAI0B,EAAIC,EAAIP,EAAOd,EAAQ,EAAG,CAC/C,IAAMe,EAAQ,IAAMD,EAChBE,EAAU,GACd,QAASC,EAAI,EAAGA,EAAIH,EAAOG,IAAK,CAC9B,IAAMK,EAAW9B,EAAgBC,EAAIC,EAAI0B,EAAKL,EAAQE,EAAKjB,CAAK,EAChEgB,GAAQ,GAAIC,EAAI,IAAM,GAAI,GAAIK,EAAS,CAAE,IAAKA,EAAS,CAAE,GACzD,IAAMC,EAAW/B,EAAgBC,EAAIC,EAAI2B,EAAKN,EAAQE,EAAKjB,EAASe,EAAQ,CAAE,EAC9EC,GAAQ,IAAKO,EAAS,CAAE,IAAKA,EAAS,CAAE,EAC1C,CACA,OAAAP,GAAQ,IACDA,CACT,CAQA,SAASQ,EAAQ/B,EAAIC,EAAIC,EAAG,CAC1B,MAAO,IAAKF,EAAKE,CAAE,IAAKD,CAAG,IAAKC,CAAE,IAAKA,CAAE,UAAWA,EAAI,CAAE,MAAOA,CAAE,IAAKA,CAAE,WAAYA,EAAI,CAAE,IAC9F,CAEO,SAAS8B,EAAWC,EAAO,CAEhCA,EAAM,kBAAkB,CACtB,gBAAAlC,EACA,gBAAAF,CACF,CAAC,EAEDoC,EAAM,WAAW,CACf,IAAA5B,EACA,OAAAU,EACA,YAAAI,EACA,eAAAC,EACA,KAAAM,EACA,OAAAK,CACF,CAAC,CACH",
  "names": ["round", "degrees2radians", "degrees", "polar2cartesian", "cx", "cy", "r", "angleDegrees", "angleRadians", "arc", "grades", "start", "end", "dir", "largeArcFlag", "startNormalized", "endNormalized", "startPoint", "endPoint", "barArc", "width", "sup", "inf", "circleSlice", "regularPolygon", "sides", "angle", "path", "i", "coords", "star", "r1", "r2", "external", "internal", "circle", "svgPlugin", "setup"]
}
